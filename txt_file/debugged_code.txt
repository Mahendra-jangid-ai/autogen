The provided code has several fundamental syntax errors. Let's break them down and create a corrected version.

**Errors:**

1. **Incorrect method definition:**  `def(a,b)` and `def(b,c)` are not valid method definitions in Python.  Methods require a name and a colon after the parameter list.  For example, `def my_method(a, b):`.

2. **Missing `:` after method definitions:**  Each method definition must end with a colon (`:`).

3. **Invalid instantiation of classes:** `a = ()` and `b = ()` attempt to assign empty tuples to class names.  To create instances of classes A and B, you need to use the class name followed by parentheses: `a = A()` and `b = B()`.

4. **`pnt` is not defined:**  The code uses `pnt` which isn't a standard Python function.  It's likely intended to be `print`.

5. **Attempting to access non-existent attributes:** `a.def` and `b.def` try to access attributes named `def`, but the classes don't have attributes with this name. You'd need to call the methods using parentheses (e.g., `a.my_method()`).


**Corrected Code with Explanations:**

```python
class A:
    def method_a(self, a, b):  # Corrected method definition
        """Example method in class A."""
        print(f"Method A called with a={a}, b={b}")
        return a + b

class B(A):
    def method_b(self, b, c):  # Corrected method definition
        """Example method in class B."""
        print(f"Method B called with b={b}, c={c}")
        return b * c

a = A()  # Correct instantiation of class A
b = B()  # Correct instantiation of class B

print(a.method_a(10, 5))  # Call method_a on instance a
print(b.method_b(2, 7))  # Call method_b on instance b

#Example of method inheritance
print(b.method_a(3,4)) #Class B inherits method_a from class A

```

This corrected code defines methods `method_a` in class `A` and `method_b` in class `B`.  It shows how to correctly instantiate the classes and call their methods.  The `self` parameter is crucial in Python methods; it refers to the instance of the class.  The example also demonstrates how class B inherits method_a from class A.  The `print` statements provide clear output demonstrating method execution.  Remember to run this code in a Python interpreter to see the results.